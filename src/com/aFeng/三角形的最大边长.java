package com.aFeng;

import java.util.Arrays;

/**
 * 给定由一些正数（代表长度）组成的数组 A，返回由其中三个长度组成的、面积不为零的三角形的最大周长。
 *
 * 如果不能形成任何面积不为零的三角形，返回 0。
 *
 *  
 *
 * 示例 1：
 *
 * 输入：[2,1,2]
 * 输出：5
 * 示例 2：
 *
 * 输入：[1,2,1]
 * 输出：0
 * 示例 3：
 *
 * 输入：[3,2,3,4]
 * 输出：10
 * 示例 4：
 *
 * 输入：[3,6,2,3]
 * 输出：8
 *  
 *
 * 提示：
 *
 * 3 <= A.length <= 10000
 * 1 <= A[i] <= 10^6
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/largest-perimeter-triangle
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
@SuppressWarnings("all")
public class 三角形的最大边长 {

    public static void main(String[] args) {
        System.out.println(method(new int[]{6, 2, 3, 2}));
    }

    static int method(int[] a){
        /**
         * 做题之前,必须要知道三角形的特性,假设三角形的三条边长为 a,b,c 那么一定满足 a<=b<=c,且 a+b>c
         * 那么思路就出来了,三角形的最大周长肯定由最大的三条边组成的,毫无疑问,问题在于如何知道这三条边能组成一个三角形
         *
         * 假设给定数组为 [3,6,2,3]
         * 第一步先对数组排序
         * [6,3,3,2]
         *
         * 将前三位作为边长,很显然6,3,3是无法组成三角形的,那么这个时候,6其实已经不能作为边长了,因为最长的两条边都无法满足它,所以只能抛弃
         * 三个边长可以看做三个指针,全部右移一位 3,3,2 这个结果就符合三角形的特性,于是直接返回结果 8
         * 而指针右移可能会出现的问题就是栈溢出,所以右移的次数必须限制,如果在那之前还无法得出结果则直接返回0即可
         * 右移的次数就是数组的长度-3,因为一开始就占用三个指针的位置 0,1,2 假设此时数组长度为3,则不能再右移了
         * 另一个小tip ,Arrays.sort()是升序排序,所以我们要逆序遍历,也就是左移指针,没有区别
         */
        Arrays.sort(a);
        for(int index = a.length-3;index>=0;index--)
            if(a[index]+a[index+1]>a[index+2])
                return a[index]+a[index+1]+a[index+2];
        return 0;
    }
}
